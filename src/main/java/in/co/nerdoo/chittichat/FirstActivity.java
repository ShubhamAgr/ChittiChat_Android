    package in.co.nerdoo.chittichat;    import android.content.Context;    import android.content.Intent;    import android.content.SharedPreferences;    import android.content.res.Resources;    import android.graphics.Color;    import android.graphics.Rect;    import android.os.Bundle;    import android.support.design.widget.AppBarLayout;    import android.support.design.widget.CollapsingToolbarLayout;    import android.support.v7.app.ActionBar;    import android.support.v7.app.AppCompatActivity;    import android.support.v7.widget.GridLayoutManager;    import android.support.v7.widget.LinearLayoutManager;    import android.support.v7.widget.RecyclerView;    import android.support.v7.widget.Toolbar;    import android.util.Log;    import android.util.TypedValue;    import android.view.Menu;    import android.view.MenuItem;    import android.view.View;    import android.view.inputmethod.InputMethodManager;    import android.widget.EditText;    import android.widget.ImageButton;    import android.widget.ImageView;    import android.widget.ProgressBar;    import android.widget.Toast;    import com.couchbase.lite.CouchbaseLiteException;    import com.couchbase.lite.Database;    import com.couchbase.lite.Document;    import com.couchbase.lite.Manager;    import com.facebook.login.LoginManager;    import com.jakewharton.rxbinding.widget.RxTextView;    import com.squareup.picasso.Picasso;    import org.json.JSONException;    import org.json.JSONObject;    import java.io.IOException;    import java.util.HashMap;    import java.util.List;    import java.util.Map;    import java.util.concurrent.TimeUnit;    import javax.inject.Inject;    import javax.inject.Named;    import io.socket.client.Socket;    import retrofit2.Retrofit;    import retrofit2.adapter.rxjava.HttpException;    import rx.Observable;    import rx.Observer;    import rx.Subscription;    import rx.android.schedulers.AndroidSchedulers;    import rx.functions.Func1;    import rx.schedulers.Schedulers;    public class FirstActivity extends AppCompatActivity implements ConnectivityReciever.ConnectivityReceiverListener {        @Inject        Manager manager;        @Inject        Database database;        @Inject @Named("Document1")        Document document_one;        @Inject @Named("GroupDocument")        Document groupDocument;        @Inject        Socket socket;        @Inject        Retrofit retrofit;        @Inject        SharedPreferences sharedPreferences;        private static ChittichatServices chittichatServices;        private static RecyclerView recyclerView;        private GroupCardAdapter adapter;        private  static List<GroupsList> groupsList;        private EditText chittichatsearch;        private ImageButton mysearchbutton;        private ImageButton mynotificationbutton;        private ImageView profile_pic_ImageView;        private Toolbar toolbar;        private Subscription subscription;        private InputMethodManager inputMethodManager;        ActionBar actionBar;        List<GroupSearchResult> groupSearchResults;        private static GroupDetail newgroupDetail;        private  static boolean menuEnabled;        private SearchResultsAdapter searchResultsAdapter;        private GroupCardAdapter groupCardAdapter;        private  static Subscription s1,s2,s3;        private static boolean searchVisible;        private static ProgressBar progressBar;        private  static boolean newtorkWasNotConnected;        @Override        protected void onCreate(Bundle savedInstanceState) {            super.onCreate(savedInstanceState);            setContentView(R.layout.activity_first);                chittichatsearch =(EditText) findViewById(R.id.chittichatsearch);                mysearchbutton = (ImageButton) findViewById(R.id.mysearchbutton);                mynotificationbutton = (ImageButton) findViewById(R.id.mynotificationbutton);                menuEnabled = true;                progressBar=(ProgressBar)findViewById(R.id.progressBar_first);                progressBar.setVisibility(View.VISIBLE);                toolbar = (Toolbar) findViewById(R.id.toolbarXX);                toolbar.showOverflowMenu();                toolbar.setTitle("ChittiChat");                setSupportActionBar(toolbar);                actionBar = getSupportActionBar();                actionBar.setHomeButtonEnabled(false);                actionBar.setDisplayHomeAsUpEnabled(false);                initCollapsingToolbar();                searchVisible = false;                inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);                ((ChittichatApp) getApplication()).getMainAppComponent().inject(this);                chittichatServices = retrofit.create(ChittichatServices.class);                profile_pic_ImageView = (ImageView)findViewById(R.id.profile_pic);                 recyclerView = (RecyclerView) findViewById(R.id.groups_recycler_view);                callRecyclerProperties_one();            socket.connect();            if(socket.connected()){                try{                    JSONObject jsonObject = new JSONObject();                    jsonObject.put("token",sharedPreferences.getString("ChittiChat_token","null"));                    socket.emit("authorize",jsonObject);                }catch (JSONException je){                    Log.e("Exception_Authorization",je.getMessage());                }            }              Log.d("profile_pic_url",sharedPreferences.getString("profile_pic_url","default"));                try{                Picasso.with(getApplicationContext())                        .load(sharedPreferences.getString("profile_pic_url","default")).fit()                        .into(profile_pic_ImageView);}catch (Exception e) {                    Log.e("Error",e.getMessage());                }            checkConnection();//                String ChittiChat_token = sharedPreferences.getString("ChittiChat_token","");//                if(!ChittiChat_token.equals("")){//                    progressBar.setVisibility(View.VISIBLE);//                    getGroups(ChittiChat_token);//                }        }        @Override        public boolean onCreateOptionsMenu(Menu menu) {            getMenuInflater().inflate(R.menu.menu_first, menu);            if(menuEnabled){                for(int i=0; i< menu.size();i++){                    menu.getItem(i).setVisible(true);                }            }else{                for(int i=0; i< menu.size();i++){                    menu.getItem(i).setVisible(false);                }            }            return true;        }        @Override        public boolean onOptionsItemSelected(MenuItem item) {            int id = item.getItemId();            switch (id){//                case R.id.action_settings://                    startActivity(new Intent(FirstActivity.this,SettingsActivity.class));//                    return true;                case R.id.newGroup:                    startActivity(new Intent(FirstActivity.this,CreateNewGroup.class));                    return true;                case R.id.suggest:                    startActivity(new Intent(FirstActivity.this,FindGroups.class));                    return  true;                case R.id.fb_logut:                    LoginManager.getInstance().logOut();                    Intent intent = new Intent(this,LoginActivity.class);                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);//                     finishAffinity(getApplicationContext());                    finish();                    startActivity(intent);                    return true;                case android.R.id.home:                    searchVisible = false;                    menuEnabled = true;                    invalidateOptionsMenu();                    actionBar.setHomeButtonEnabled(false);                    actionBar.setDisplayHomeAsUpEnabled(false);//                     mynotificationbutton.setVisibility(View.VISIBLE);                    mysearchbutton.setVisibility(View.VISIBLE);                    chittichatsearch.setVisibility(View.GONE);                    chittichatsearch.setText("");                    //                    callRecyclerProperties_one();                    if(recyclerView.getAdapter()  == null){                        recyclerView.setAdapter(groupCardAdapter);                    }else if(recyclerView.getAdapter() instanceof GroupCardAdapter){                        groupCardAdapter.notifyDataSetChanged();                    }else{                        recyclerView.swapAdapter(groupCardAdapter,false);//make true                    }                    //                    inputMethodManager.hideSoftInputFromWindow(chittichatsearch.getWindowToken(),0);//                     if(inputMethodManager.isAcceptingText()){//                         inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);//                     }                default://                     Toast.makeText(getApplicationContext(),"Does not match any options",Toast.LENGTH_SHORT).show();            }            return super.onOptionsItemSelected(item);        }        @Override        public void onStop(){            super.onStop();        }        @Override        public void onPause(){            super.onPause();            Log.d("onPause","Invoked");            socket.connect();            if(socket.connected()){                try{                    JSONObject jsonObject = new JSONObject();                    jsonObject.put("token",sharedPreferences.getString("ChittiChat_token","null"));                    socket.emit("app_close",jsonObject);                }catch (JSONException je){                    Log.e("Exception_Authorization",je.getMessage());                }            }        }        @Override        public void onBackPressed(){            if(searchVisible){                searchVisible = false;                menuEnabled = true;                invalidateOptionsMenu();                actionBar.setHomeButtonEnabled(false);                actionBar.setDisplayHomeAsUpEnabled(false);//                mynotificationbutton.setVisibility(View.VISIBLE);                mysearchbutton.setVisibility(View.VISIBLE);                chittichatsearch.setVisibility(View.GONE);                chittichatsearch.setText("");                //                callRecyclerProperties_one();                if(recyclerView.getAdapter()  == null){                    recyclerView.setAdapter(groupCardAdapter);                }else if(recyclerView.getAdapter() instanceof GroupCardAdapter){                    groupCardAdapter.notifyDataSetChanged();                }else{                    recyclerView.swapAdapter(groupCardAdapter,false);//make true                }            }else{                finish();            }        }        @Override        protected void onResume(){            super.onResume();            Log.d("OnResume","Invoked");            socket.connect();            if(socket.connected()){                try{                    JSONObject jsonObject = new JSONObject();                    jsonObject.put("token",sharedPreferences.getString("ChittiChat_token","null"));                    socket.emit("authorize",jsonObject);                }catch (JSONException je){                    Log.e("Exception_Authorization",je.getMessage());                }            }            if(newtorkWasNotConnected){                checkConnection();            }        }        @Override        protected void onDestroy() {            super.onDestroy();        }        /**         * Fetching Data From server         */        private void getGroups(String token) {            final Observable<List<GroupsList>> groupsList = chittichatServices.getResponseOnGroups(token);            subscription = groupsList.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(groupsLists->{                FirstActivity.groupsList = groupsLists;                callRecyclerProperties_one();                groupCardAdapter = new GroupCardAdapter(getApplicationContext(),groupsLists);                if(recyclerView.getAdapter()  == null){                    recyclerView.setAdapter(groupCardAdapter);                }else if(recyclerView.getAdapter() instanceof GroupCardAdapter){                    groupCardAdapter.notifyDataSetChanged();                }else{                    recyclerView.swapAdapter(groupCardAdapter,false);//make true                }                subscription.unsubscribe();            },throwable -> {                if(throwable instanceof HttpException) {//                ((HttpException) throwable).code() == 400;                    Log.e("error",((HttpException) throwable).response().errorBody().toString());                }                if (throwable instanceof IOException) {                    // A network or conversion error happened                }                progressBar.setVisibility(View.GONE);                Log.e("error",throwable.getMessage());            });        }        private void search(){            Observable<String> searchText = RxTextView.textChanges(chittichatsearch).filter(new Func1<CharSequence, Boolean>() {                @Override                public Boolean call(CharSequence charSequence) {                    return (charSequence.length()>=3);                }            }).debounce(300,TimeUnit.MILLISECONDS).map(new Func1<CharSequence, String>() {                @Override                public String call(CharSequence charSequence) {                    return charSequence.toString();                }            });            searchText.subscribe(new Observer<String>() {                @Override                public void onCompleted() {                    Log.d("Search","Completed");                }                @Override                public void onError(Throwable e) {                    Log.e("Search",e.getMessage());                }                @Override                public void onNext(String query) {                    Log.i("Query",query);                    SearchRequest searchRequest = new SearchRequest(query.trim());                    Observable<List<GroupSearchResult>> getSearchGroupsResults = chittichatServices.getResponseOnSearchGroups(searchRequest);                    if(chittichatsearch.getText().toString().length() >= 3){                        s2 = getSearchGroupsResults.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(groupSearchResults->{                            searchResultsAdapter = new SearchResultsAdapter(groupSearchResults);                            callRecyclerProperties_two();                            if(recyclerView.getAdapter() == null){                                recyclerView.setAdapter(searchResultsAdapter);//make true                            }else if (recyclerView.getAdapter() instanceof SearchResultsAdapter){                                searchResultsAdapter.notifyDataSetChanged();                            } else {                                recyclerView.swapAdapter(searchResultsAdapter,false);//make true                            }                            s2.unsubscribe();                        },throwable -> {                            if(throwable instanceof HttpException) {//                ((HttpException) throwable).code() == 400;                                Log.e("error",((HttpException) throwable).response().errorBody().toString());                            }                            if (throwable instanceof IOException) {                                // A network or conversion error happened                            }                            s2.unsubscribe();                        });                    }                }            });        }        /**         *  DataBase Task         */        private void createContent(){            Map<String,Object> map = new HashMap<>();            map.put("ss1","Sssss");            try {            document_one.putProperties(map);            } catch (CouchbaseLiteException e) {                e.printStackTrace();            }        }        private void readContent(){            Log.d("content",String.valueOf(document_one.getProperties()));            Toast.makeText(getApplicationContext(),"abcde"+document_one.getProperties(),Toast.LENGTH_LONG).show();        }        /**         * Check Network Connection         */        @Override        public void onNetworkConnectionChanged(boolean isConnected) {            Log.d("Network connection","Changed");            if(isConnected){                String ChittiChat_token = sharedPreferences.getString("ChittiChat_token","");                if(!ChittiChat_token.equals("")){                    progressBar.setVisibility(View.VISIBLE);                    getGroups(ChittiChat_token);                }            }else {                newtorkWasNotConnected = true;                Toast.makeText(getApplicationContext(), String.valueOf("Please Check your Network Connectivity"), Toast.LENGTH_LONG).show();            }        }        private void checkConnection(){            boolean isConnected = ConnectivityReciever.isConnected();            if(isConnected){                String ChittiChat_token = sharedPreferences.getString("ChittiChat_token","");                if(!ChittiChat_token.equals("")){                    progressBar.setVisibility(View.VISIBLE);                    getGroups(ChittiChat_token);                }            }else {                newtorkWasNotConnected = true;                Toast.makeText(getApplicationContext(),String.valueOf("Please Check your Network Connectivity"),Toast.LENGTH_LONG).show();            }        }        /**         * On Click Buttons         */        public void onClickSearchButton(View view) {            searchVisible = true;            menuEnabled = false;            invalidateOptionsMenu();//            mynotificationbutton.setVisibility(View.GONE);            mysearchbutton.setVisibility(View.GONE);            actionBar.setHomeAsUpIndicator(R.drawable.ic_arrow_back_black_24dp);            actionBar.setHomeButtonEnabled(true);            actionBar.setDisplayHomeAsUpEnabled(true);            chittichatsearch.setVisibility(View.VISIBLE);            chittichatsearch.requestFocus();            searchResultsAdapter = new SearchResultsAdapter(groupSearchResults);            callRecyclerProperties_two();            if(recyclerView.getAdapter() == null){                recyclerView.setAdapter(searchResultsAdapter);//make true            }else if (recyclerView.getAdapter() instanceof SearchResultsAdapter){                searchResultsAdapter.notifyDataSetChanged();            } else {                recyclerView.swapAdapter(searchResultsAdapter,false);//make true            }            search();            inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);        }        /**         * Collapsing Toolbar Properties         */        private  void callRecyclerProperties_one(){            RecyclerView.LayoutManager layoutManager = new GridLayoutManager(this,2);            recyclerView.setLayoutManager(layoutManager);//            recyclerView.addItemDecoration(new GridSpacingItemDecoration(2,dpToPx(10),true));//            recyclerView.setItemAnimator(new DefaultItemAnimator());        }        private  void callRecyclerProperties_two(){            RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this);            recyclerView.setHasFixedSize(true);            recyclerView.setLayoutManager(layoutManager);        }        private void initCollapsingToolbar() {            final CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.toolbar_layout);//            collapsingToolbar.setTitle("");//sharedPreferences.getString("first_name","------"));//setTo user name or First name.....            AppBarLayout appBarLayout = (AppBarLayout) findViewById(R.id.app_bar);            appBarLayout.setExpanded(false);            // hiding & showing the title when toolbar expanded & collapsed            appBarLayout.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() {                boolean isShow = false;                int scrollRange = -1;                @Override                public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) {                    if (scrollRange == -1) {                        scrollRange = appBarLayout.getTotalScrollRange();                        collapsingToolbar.setTitle(sharedPreferences.getString("first_name","------"));//                        mynotificationbutton.setVisibility(View.GONE);                        mysearchbutton.setVisibility(View.GONE);                        menuEnabled = false;                        invalidateOptionsMenu();                    }                    if (scrollRange + verticalOffset == 0) {                        collapsingToolbar.setTitle(getString(R.string.app_name));                        if(searchVisible){                            menuEnabled = false;                            invalidateOptionsMenu();//                            mynotificationbutton.setVisibility(View.GONE);                            mysearchbutton.setVisibility(View.GONE);                            toolbar.setBackgroundColor(Color.parseColor("#FFFFFFFF"));;                            appBarLayout.setExpanded(false,false);                            appBarLayout.setActivated(false);                        }else{                            scrollRange = appBarLayout.getTotalScrollRange();                            menuEnabled = true;                            invalidateOptionsMenu();//                            mynotificationbutton.setVisibility(View.VISIBLE);                            mysearchbutton.setVisibility(View.VISIBLE);                            toolbar.setBackgroundColor(Color.parseColor("#A30B37"));                        }                        isShow = true;                    }                    else if (isShow) {                        scrollRange = appBarLayout.getTotalScrollRange();                        toolbar.getBackground().setAlpha(0);                        collapsingToolbar.setTitle(sharedPreferences.getString("first_name","------"));//                        mynotificationbutton.setVisibility(View.GONE);                        mysearchbutton.setVisibility(View.GONE);                        menuEnabled = false;                        invalidateOptionsMenu();                        isShow = false;                    }else{                        scrollRange = appBarLayout.getTotalScrollRange();                    }                }            });        }        /**         * RecyclerView item decoration - give equal margin around grid item         */        public class GridSpacingItemDecoration extends RecyclerView.ItemDecoration {            private int spanCount;            private int spacing;            private boolean includeEdge;            public GridSpacingItemDecoration(int spanCount, int spacing, boolean includeEdge) {                this.spanCount = spanCount;                this.spacing = spacing;                this.includeEdge = includeEdge;            }            @Override            public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {                int position = parent.getChildAdapterPosition(view); // item position                int column = position % spanCount; // item column                if (includeEdge) {                    outRect.left = spacing - column * spacing / spanCount; // spacing - column * ((1f / spanCount) * spacing)                    outRect.right = (column + 1) * spacing / spanCount; // (column + 1) * ((1f / spanCount) * spacing)                    if (position < spanCount) { // top edge                        outRect.top = spacing;                    }                    outRect.bottom = spacing; // item bottom                } else {                    outRect.left = column * spacing / spanCount; // column * ((1f / spanCount) * spacing)                    outRect.right = spacing - (column + 1) * spacing / spanCount; // spacing - (column + 1) * ((1f /    spanCount) * spacing)                    if (position >= spanCount) {                        outRect.top = spacing; // item top                    }                }            }        }        /**         * Converting dp to pixel         */        private int dpToPx(int dp) {            Resources r = getResources();            return Math.round(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics()));        }    }   class GroupSearchResult{       String _id;       String group_name;       String group_about;       String knock_knock_question;       public String getGroup_about() {           return group_about;       }       public void setGroup_about(String group_about) {           this.group_about = group_about;       }       public String getKnock_knock_question() {           return knock_knock_question;       }       public void setKnock_knock_question(String knock_knock_question) {           this.knock_knock_question = knock_knock_question;       }       public String get_id() {           return _id;       }       public void set_id(String _id) {           this._id = _id;       }       public String getGroup_name() {           return group_name;       }       public void setGroup_name(String group_name) {           this.group_name = group_name;       }   }    class SearchRequest{       String query;       public SearchRequest(String query) {           this.query = query;       }   }